name: AI Code Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        uses: cli/cli-action@v1

      # - name: Get PR diff
      #   id: get_diff
      #   run: |
      #     DIFF=$(gh pr diff ${{ github.event.pull_request.number }} --color never)
      #     echo "$DIFF" > pr.diff
      #     echo "diff_file=$(cat pr.diff | base64 -w 0)" >> $GITHUB_OUTPUT
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Collect changed files with full content and diff
        id: prepare_data
        run: |
          mkdir review_files

          FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)

          JSON_ARRAY="["

          for FILE in $FILES; do
            if [[ -f "$FILE" ]]; then
              CONTENT=$(cat "$FILE" | base64 -w 0)
              DIFF=$(git diff "$FILE" | base64 -w 0)

              JSON_ARRAY="${JSON_ARRAY}{\"file\": \"$FILE\", \"content\": \"$CONTENT\", \"diff\": \"$DIFF\"},"
            fi
          done

          JSON_ARRAY="${JSON_ARRAY%,}]"

          echo "$JSON_ARRAY" > review_files/data.json
          echo "data_file=review_files/data.json" >> $GITHUB_OUTPUT

      # - name: Send diff to local AI reviewer API
      #   id: get_review
      #   run: |
      #     DIFF_DECODED=$(echo "${{ steps.get_diff.outputs.diff_file }}" | base64 -d)
          
      #     echo "Sending diff to AI..."
      #     RESPONSE=$(curl -s -X POST https://your-ngrok-or-api-url/review \
      #       -H "Content-Type: application/json" \
      #       -d "{\"diff\": \"${DIFF_DECODED}\"}")

      #     echo "RESPONSE=$RESPONSE"
      #     REVIEW_TEXT=$(echo "$RESPONSE" | jq -r '.review')
      #     echo "review_comment<<EOF" >> $GITHUB_OUTPUT
      #     echo "$REVIEW_TEXT" >> $GITHUB_OUTPUT
      #     echo "EOF" >> $GITHUB_OUTPUT

      - name: Send files and diffs to AI reviewer
        id: get_review
        run: |
          PAYLOAD=$(cat ${{ steps.prepare_data.outputs.data_file }})

          RESPONSE=$(curl -s -X POST https://your-api/review \
            -H "Content-Type: application/json" \
            -d "{\"files\": $PAYLOAD}")

          echo "$RESPONSE" > review_response.json
          echo "review_comment=$(jq -r '.summary' review_response.json)" >> $GITHUB_OUTPUT


      - name: Comment AI Review on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "${{ steps.get_review.outputs.review_comment }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post inline comments
        run: |
          echo '${{ steps.get_review.outputs.review_comment }}' > review.json
          
          jq -c '.review[]' review.json | while read -r comment; do
            FILE=$(echo "$comment" | jq -r '.file')
            LINE=$(echo "$comment" | jq -r '.line')
            BODY=$(echo "$comment" | jq -r '.comment')

            gh pr review --comment \
              --body "$BODY" \
              --repo ${{ github.repository }} \
              --pull-request ${{ github.event.pull_request.number }} \
              --file "$FILE" \
              --line "$LINE"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add reaction emoji
        run: |
          SEVERITY=$(jq -r '.severity' review.json)

          if [[ "$SEVERITY" == "none" ]]; then
            EMOJI=":+1:"
          elif [[ "$SEVERITY" == "minor" ]]; then
            EMOJI=":eyes:"
          else
            EMOJI=":warning:"
          fi

          PR_ID=${{ github.event.pull_request.node_id }}
          COMMENT=$(gh pr comment ${{ github.event.pull_request.number }} \
              --body "AI Review Summary: $(jq -r '.summary' review.json)" \
              --json id --jq '.id')

          gh api graphql -f query='
            mutation($subjectId:ID!, $content:String!) {
              addReaction(input:{subjectId:$subjectId, content:$content}) {
                reaction {
                  content
                }
              }
            }' -F subjectId=$COMMENT -F content=${EMOJI//:/}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto approve safe PRs
        if: ${{ steps.get_review.outputs.review_comment && steps.get_review.outputs.review_comment != '' }}
        run: |
          SEVERITY=$(jq -r '.severity' review.json)

          if [[ "$SEVERITY" == "none" || "$SEVERITY" == "minor" ]]; then
            echo "AI review found no serious issues. Approving..."
            gh pr review ${{ github.event.pull_request.number }} --approve --body "âœ… AI found no major issues in the PR."
          else
            echo "AI review found major issues. Skipping approval."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
